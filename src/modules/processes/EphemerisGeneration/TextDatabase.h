//     ____   ______ __
//    / __ \ / ____// /
//   / /_/ // /    / /
//  / ____// /___ / /___   PixInsight Class Library
// /_/     \____//_____/   PCL 2.9.4
// ----------------------------------------------------------------------------
// Standard EphemerisGeneration Process Module Version 1.3.0
// ----------------------------------------------------------------------------
// TextDatabase.h - Released 2025-04-07T08:53:55Z
// ----------------------------------------------------------------------------
// This file is part of the standard EphemerisGeneration PixInsight module.
//
// Copyright (c) 2003-2025 Pleiades Astrophoto S.L. All Rights Reserved.
//
// Use of this source code is governed by the PixInsight Class Library License
// version 2.0, which can be found in the LICENSE file as well as at:
// https://pixinsight.com/license/PCL-License-2.0.html
// ----------------------------------------------------------------------------

#ifndef __TextBatabase_h
#define __TextBatabase_h

#include "EphemerisGeneratorInstance.h"

#include <pcl/Optional.h>

namespace pcl
{

// ----------------------------------------------------------------------------

/*
 * Parsing and decoding plain text databases of orbital elements and state
 * vectors.
 *
 * This mostly includes well-known public databases from Lowell Observatory,
 * Minor Planet Center and Jet Propulsion Laboratory in a variety of formats,
 * plus some generic CSV files and tabular formats generated by our standard
 * scripts and tools.
 */
class TextDatabase
{
public:

   /*
    * Enumerated types describing database types, field types, and formats.
    */
   enum contents_type
   {
      Contents_OrbitalElements,
      Contents_StateVectors
   };
   enum field_disposition_type
   {
      FieldDisposition_CommaSeparated,
      FieldDisposition_FixedWidth
   };
   enum date_format_type
   {
      DateFormat_ISO,
      DateFormat_Compact,
      DateFormat_Separate,
      DateFormat_JD,
      DateFormat_MJD,
      DateFormat_PackedMPC
   };
   enum id_format_type
   {
      IdFormat_Plain,
      IdFormat_PackedMPC,
      IdFormat_Parenthesized
   };

   /*
    * Description of a database field.
    */
   struct Field
   {
      int pos   = 0;
      int width = -1;

      operator bool() const
      {
         return width >= 0;
      }
   };

   /*
    * Description of a database format
    */
   struct FormatDescription
   {
      String                 name;
      contents_type          contents = Contents_OrbitalElements;
      field_disposition_type fieldDisposition = FieldDisposition_CommaSeparated;
      date_format_type       epochFormat = DateFormat_Compact;
      date_format_type       timePPFormat = DateFormat_JD;
      id_format_type         idFormat = IdFormat_Plain;
      int                    skipHeaderLines = 0;
      Field fld_id;
      Field fld_name;
      Field fld_epoch;
      Field fld_H;
      Field fld_G;
      Field fld_M1;
      Field fld_K1;
      Field fld_M2;
      Field fld_K2;
      Field fld_PC;
      Field fld_B_V;
      Field fld_U_B;
      Field fld_I_R;
      Field fld_D;
      Field fld_A1;
      Field fld_A2;
      Field fld_A3;
      Field fld_DT;
      Field fld_a;
      Field fld_q;
      Field fld_e;
      Field fld_M;
      Field fld_T;
      Field fld_i;
      Field fld_O;
      Field fld_w;
      Field fld_x;
      Field fld_y;
      Field fld_z;
      Field fld_vx;
      Field fld_vy;
      Field fld_vz;

      bool operator ==( const FormatDescription& f ) const
      {
         return name.CompareIC( f.name ) == 0;
      }

      bool operator <( const FormatDescription& f ) const
      {
         return name.CompareIC( f.name ) < 0;
      }

      void Validate() const;

      static Array<FormatDescription> Parse( const String& filePath );
   };

   /*
    * Data retrieved for an object during a database search operation.
    */
   struct ObjectData
   {
      IsoString        id;      // unique object identifier
      IsoString        name;    // object name
      Vector           state = Vector( 0.0, 8 ); // state vectors or orbital elements
      double           epochJD; // epoch of initial conditions, JD, TDB
      Optional<double> H;       // absolute magnitude (mag)
      Optional<double> G;       // magnitude slope parameter
      Optional<double> M1;      // comet total absolute magnitude
      Optional<double> K1;      // comet total magnitude slope parameter
      Optional<double> M2;      // comet nuclear absolute magnitude
      Optional<double> K2;      // comet nuclear magnitude slope parameter
      Optional<double> PC;      // comet nuclear magnitude phase coefficient
      Optional<double> B_V;     // color index B-V (mag)
      Optional<double> U_B;     // color index U-B (mag)
      Optional<double> I_R;     // color index I-R (mag)
      Optional<double> D;       // diameter (km)
      Optional<double> A1;      // non-gravitational acceleration, radial component (au/day^2)
      Optional<double> A2;      // non-gravitational acceleration, transversal component (au/day^2)
      Optional<double> A3;      // non-gravitational acceleration, normal component (au/day^2)
      Optional<double> DT;      // non-gravitational acceleration, perihelion time offset (day)

      bool operator ==( const ObjectData& x ) const
      {
         return id == x.id && name == x.name;
      }

      bool operator <( const ObjectData& x ) const
      {
         if ( id.IsEmpty() )
         {
            if ( !x.id.IsEmpty() )
               return false;
            return name < x.name;
         }
         else
         {
            if ( x.id.IsEmpty() )
               return true;

            int id1, id2;
            if ( id.TryToInt( id1, 10/*base*/ ) )
               if ( x.id.TryToInt( id2, 10/*base*/ ) )
                  if ( id1 != id2 )
                     return id1 < id2;
            return (id != x.id) ? id < x.id : name < x.name;
         }
      }
   };

   TextDatabase( const FormatDescription& format )
      : m_format( format )
   {
   }

   virtual ~TextDatabase() = default;

   Array<ObjectData> Search( const EphemerisGeneratorInstance&, size_type maxCount = 0 ) const;

private:

   FormatDescription m_format;
};

// ----------------------------------------------------------------------------

} // pcl

#endif   // __TextBatabase_h

// ----------------------------------------------------------------------------
// EOF TextDatabase.h - Released 2025-04-07T08:53:55Z
